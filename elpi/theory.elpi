%% local set theory following Bell's book, where
%% 'eq' and 'star' are primitive,
%% Additionally with 'forall', and 'imp'
%% for context management.

mem X XS :- std.mem XS X.

type sublist list A -> list A -> prop.
sublist [] _.
sublist [X|L1] L2 :- (mem X L2), (sublist L1 L2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

kind tm type.
kind ty type.

type unit ty.
type omega ty.
type prod ty -> ty -> ty.
type power ty -> ty.

type star tm.
type compr ty -> (tm -> tm) -> tm.
type opair tm -> tm -> tm.
type proj1 tm -> tm.
type proj2 tm -> tm.
type eq tm -> tm -> tm.
type in tm -> tm -> tm.
type forall ty -> (tm -> tm) -> tm.

type typeof tm -> ty -> prop.

%% Terms are assumed to be well-typed
typeof star unit.
typeof (compr A T) (power A).
typeof (opair S T) (prod A B).
typeof (proj1 U) A :- (typeof U (prod A _)).
typeof (proj2 U) B :- (typeof U (prod _ B)).
typeof (eq S T) omega.
typeof (in S T) omega.
typeof (forall A S) omega.

kind pf type.
type proof pf -> tm -> (list tm) -> prop.
type thm (list tm) -> tm -> (list tm) -> (list pf) -> prop.
type theorem (list tm) -> tm -> (list tm) -> (list pf) -> prop.

% thm (hyps) (statement) (hilbert proof) (proof tree)
thm H P [] [R0] :-
	print "***Subgoal:***" P,
	(!, (proof R0 P H); !, print "***Failure:***" H "⊢" P, fail),
	print "***Success:***" P.%" [by] " R0.

thm H P [Q|L] [R0|R] :-
	print "***Subgoal:***" P,
	(thm H Q L R), !,
	(std.append [Q|L] H L1),
	(!, (proof R0 P L1); !, print "***Failure:***" L1 "⊢" P, fail),
	print "***Success:***" P.% " [by] " R0.

theorem H P Q R :-
	print "—————————————————————————————————————————————————————————————————————————————————————",
	print "—————————————————————————————————————————————————————————————————————————————————————",
	print "***Proving:***" H "⊢" P,
	thm H P Q R, !,
	print "***Done:***" H "⊢" P " [by] " R.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Subterms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Rule for equality requires either subterms or substitutions

type subterm (tm -> tm) -> tm -> tm -> prop.

%% The following test failed:
%%   (subterm T (in X y) (in X z))
%% because it then checks that whether
%%   (subterm T0 (in X y) X)
%% which fails the occurs-check.

subterm (x \ x) X X.
%% occurs check: If S cannot be instantiated to X, then S must occur in X (?)
%% check out the builtin `occurs`
subterm T X (uvar S) :- !, fail.

%% Subterms can also appear in applications!
%% We check the case of neutral applications
%%  (c S1 ... Sn)
%% where c is a constant variable (ie. universally quantified)
%% TODO: generalize to n > 1.
subterm (x \ K (T x)) X S :- (name S K [S0]),
							 (subterm T X S0).

subterm (x \ proj1 (T x)) X (proj1 S) :- subterm T X S.
subterm (x \ proj2 (T x)) X (proj2 S) :- subterm T X S.
subterm (x \ opair (T x) S2) X (opair S1 S2) :- subterm T X S1.
subterm (x \ opair S1 (T x)) X (opair S1 S2) :- subterm T X S2.
subterm (x \ (in (T x) S2)) X (in S1 S2) :- subterm T X S1.
subterm (x \ (in S1 (T x))) X (in S1 S2) :- subterm T X S2.
subterm (x \ (eq (T x) S2)) X (eq S1 S2) :- subterm T X S1.
subterm (x \ (eq S1 (T x))) X (eq S1 S2) :- subterm T X S2.
subterm (x \ (compr A (y \ T y x))) X (compr A S) :-
	(pi y \ subterm (T y) X (S y)).
subterm (x \ (forall A (y \ T y x))) X (forall A S) :-
	(pi y \ subterm (T y) X (S y)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% type subst (tm -> tm) -> tm -> tm -> prop.
%% type copy_tm tm -> tm -> prop.
%% type copy_ty ty -> ty -> prop.

%% subst T X TX :- (pi x\ (copy_tm x X) =>
%% 				 (copy_tm (T x) TX)).

%% %% Do we need occurs check?
%% copy_tm X X.
%% %% copy_tm (uvar X) _ :- !, fail.
%% %% copy_tm _ (uvar X) :- !, fail.
%% copy_tm (proj1 U1) (proj1 U2) :- (copy_tm U1 U2).
%% copy_tm (proj2 U1) (proj2 U2) :- (copy_tm U1 U2).
%% copy_tm (opair S1 T1) (opair S2 T2) :- (copy_tm S1 S2), (copy_tm T1 T2).
%% copy_tm (eq S1 T1) (eq S2 T2) :- print (eq S1 T1) (eq S2 T2),
%% 								 (copy_tm S1 S2), (copy_tm T1 T2).
%% copy_tm (in S1 T1) (in S2 T2) :- (copy_tm S1 S2), (copy_tm T1 T2).
%% copy_tm (compr A1 P1) (compr A2 P2) :- print (compr A1 P1) (compr A2 P2),
%% 									   (copy_ty A1 A2),
%% 									   (pi x\ (copy_tm (P1 x) (P2 x))).

%% copy_ty A A.
%% copy_ty (prod A1 B1) (prod A2 B2) :- (copy_ty A1 A2), (copy_ty B1 B2).
%% copy_ty (power A1) (power A2) :- (copy_ty A1 A2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%          Axioms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% tautology
proof (tautology) P L :- (mem P L).

%% unity
proof (unity) (eq X star) _ :- (typeof X unit).

%% equality
proof (equality S T) PT L :- (mem (eq S T) L),
							 %%print "trying equality " S "∼" T ": ? ⊢" PT,
							 subterm P T PT,
							 mem (P S) L.
							 %% print ">> found " P,
							 %% print ">> where " S "∼" T "," (P S) "⊢" PT.

%% product beta 1
proof (prod_beta1 S) (eq (proj1 (opair S _)) S) _.


%% product beta 2
proof (prod_beta2 T) (eq (proj2 (opair _ T)) T) _.

%% product eta
proof (prod_eta U) (eq (opair (proj1 U) (proj2 U)) U) _ :- typeof U (prod _ _).


%% comprehension
proof (comprehension (compr A P)) (eq (in T (compr A P)) PT) _ :- (P T = PT).

%% Extensionality
%% Get rid of equiv, make it into a definition!
proof (extensionality R) (eq S T) L :-
	(pi x\ (proof R (equiv (in x S) (in x T)) L)).


%% Equivalence (propositional extensionality)
proof (equivalence R1 R2) (equiv P Q) L :-
	(proof R1 Q [P|L]),
	(proof R2 P [Q|L]).

%% Forall
%% This invalid example illustrates why we must
%% sometimes backtrack after eliminating universals
%%  (P X) |- P x
%% -------------------------- (forall-intro)  >> Not possible, since x is free in X!
%%  (P X) |- (forall x, P x)
%% ------------------------------------ (forall-elim)
%%  (forall x, P x) |- (forall x, P x)

%% Whereas the following is valid
%%  P X |- P x
%% ------------------------ (forall-elim)
%%  (forall x, P x) |- P x
%% ------------------------------------ (forall-intro)
%%  (forall x, P x) |- (forall x, P x)
%% because here x is not free in (forall x, P x)!

%% For this reason we place the introduction rules before the elimination rules.
proof (forall-intro R) (forall A P) L :-
	%% print "forall-intro" P,
	!,(pi x\ (proof (R x) (P x) L)).
% generalized forall intro
proof (let-intro R) (let x\ [(Q x)|(L1 x)]) L2 :-
	%% print "let-intro" L2,
	!,(pi x\ (thm L2 (Q x) (L1 x) (R x))).



proof (forall-elim R) PT L :- (mem (forall A P) L),
							  (sigma x\
							   (not (mem (P x) L);
								(P x = forall A P))),
							  %% (print "forall-elim >>" (P X) "|-" PT),
							  (proof R PT [(P X)|L]).

% generalized forall elim
proof (let-elim R) PT L :- (mem (let L1) L),
						   (sigma x\
							(not (sublist (L1 x) L))),
						   %% (print "let-elim >>" (L1 X) "|-" PT),
						   (std.append (L1 X) L L2),
						   (proof R PT L2).


% implication
proof (suppose-intro R) (suppose P [Q|L1]) L2 :- !,(thm [P|L2] Q L1 R).

proof (imp-intro) (imp P Q) L :- (mem (suppose P L1) L),
								 (mem Q L1).
